
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import os
import tkinter as tk
from tkinter import messagebox

# ======= ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå =======
font_path = "./fonts/THSarabunNew.ttf"
if os.path.exists(font_path):
    font_prop = fm.FontProperties(fname=font_path)
    font_name = font_prop.get_name()
else:
    font_name = 'Tahoma'
    font_prop = fm.FontProperties(family=font_name)


# ======= ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå =======
class EcosystemGraph:
    def __init__(self):
        self.G = nx.DiGraph()
        self.nodes = {}
        self.ecosystem_type = "Terrestrial"

    def add_species(self, name, category):
        self.G.add_node(name)
        self.nodes[name] = category
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡πÄ‡∏õ‡πá‡∏ô {category}")

    def delete_species(self, name):
        if name in self.nodes:
            self.G.remove_node(name)
            self.nodes.pop(name)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï {name} ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print(f"‚ùóÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠ {name}")

    def auto_generate_relationship(self):
        print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
        producers = [n for n in self.nodes if self.nodes[n] == "Producer"]
        herbivores = [n for n in self.nodes if self.nodes[n] == "Herbivore"]
        carnivores = [n for n in self.nodes if self.nodes[n] == "Carnivore"]
        decomposers = [n for n in self.nodes if self.nodes[n] == "Decomposer"]

        for herb in herbivores:
            for prod in producers:
                if not self.G.has_edge(prod, herb):
                    self.G.add_edge(prod, herb)
                    print(f"üîó {herb} ‡∏•‡πà‡∏≤ {prod}")

        for carn in carnivores:
            for herb in herbivores:
                if not self.G.has_edge(herb, carn):
                    self.G.add_edge(herb, carn)
                    print(f"üîó {carn} ‡∏•‡πà‡∏≤ {herb}")

        for deco in decomposers:
            for other in self.nodes:
                if other != deco and not self.G.has_edge(other, deco):
                    self.G.add_edge(other, deco)
                    print(f"‚ôªÔ∏è {deco} ‡∏¢‡πà‡∏≠‡∏¢‡∏ã‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á {other}")

        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    def edit_species(self, old_name, new_name, new_category):
        if old_name not in self.nodes:
            print(f"‚ùóÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö {old_name} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        self.G = nx.relabel_nodes(self.G, {old_name: new_name})
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô nodes
        self.nodes.pop(old_name)
        self.nodes[new_name] = new_category
        print(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {old_name} ‡πÄ‡∏õ‡πá‡∏ô {new_name} ({new_category}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    def draw_graph(self):
        if not self.nodes:
            print("‚ùóÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
            return

        pos = nx.spring_layout(self.G, seed=42, k=1.2, scale=3)
        color_map = {"Producer": "green", "Herbivore": "blue", "Carnivore": "red", "Decomposer": "brown"}
        node_colors = [color_map.get(self.nodes[n], "gray") for n in self.G.nodes]

        plt.figure(figsize=(10, 6))
        nx.draw(self.G, pos, with_labels=True, node_color=node_colors, edge_color="gray",
                node_size=2000, font_size=10, font_weight="bold", font_family=font_name, arrows=True)
        plt.title(f"üåç ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏® ({self.ecosystem_type})")
        plt.axis('off')
        plt.tight_layout()
        plt.show(block=True)

    def analyze_ecosystem(self):
        if not self.nodes:
            print("‚ùóÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return

        producers = [n for n in self.nodes if self.nodes[n] == "Producer"]
        herbivores = [n for n in self.nodes if self.nodes[n] == "Herbivore"]
        carnivores = [n for n in self.nodes if self.nodes[n] == "Carnivore"]
        decomposers = [n for n in self.nodes if self.nodes[n] == "Decomposer"]

        messages = []
        warning = False

        if len(herbivores) > len(carnivores) * 3:
            messages.append("‚ö†Ô∏è ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï ‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏î")
            warning = True
        if len(carnivores) < len(herbivores) / 2:
            messages.append("‚ö†Ô∏è ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô")
            warning = True
        if len(carnivores) > len(herbivores):
            messages.append("‚ö†Ô∏è ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä ‡∏™‡∏π‡∏ç‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå")
            warning = True

        if not messages:
            messages.append("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ")

        root = tk.Tk()
        root.withdraw()
        if warning:
            messagebox.showwarning("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö", "\n".join(messages))
        else:
            messagebox.showinfo("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö", "\n".join(messages))
        root.destroy()


        categories = ['Producer', 'Herbivore', 'Carnivore', 'Decomposer']
        counts = [len(producers), len(herbivores), len(carnivores), len(decomposers)]

        plt.figure(figsize=(7, 5), constrained_layout=True)
        bars = plt.bar(categories, counts, color=["green", "blue", "red", "brown"])
        plt.title("‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®", fontproperties=font_prop)
        plt.ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", fontproperties=font_prop)

        for bar in bars:
            yval = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2, yval + 0.1, yval, ha='center', fontsize=10)

        plt.show(block=True)

# ======= ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á =======
sample_datasets = {
    "1": [
        {"name": "‡∏´‡∏ç‡πâ‡∏≤", "category": "Producer"},
        {"name": "‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ", "category": "Producer"},
        {"name": "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢", "category": "Herbivore"},
        {"name": "‡∏Å‡∏ß‡∏≤‡∏á", "category": "Herbivore"},
        {"name": "‡∏ß‡∏±‡∏ß", "category": "Herbivore"},
        {"name": "‡∏™‡∏¥‡∏á‡πÇ‡∏ï", "category": "Carnivore"},
        {"name": "‡πÄ‡∏´‡∏¢‡∏µ‡πà‡∏¢‡∏ß", "category": "Carnivore"},
        {"name": "‡∏á‡∏π", "category": "Carnivore"},
        {"name": "‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤", "category": "Decomposer"},
        {"name": "‡πÅ‡∏°‡∏•‡∏á", "category": "Decomposer"}
    ],
    "2": [
        {"name": "‡πÑ‡∏ú‡πà", "category": "Producer"},
        {"name": "‡∏ï‡πâ‡∏ô‡∏´‡∏ç‡πâ‡∏≤", "category": "Producer"},
        {"name": "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢", "category": "Herbivore"},
        {"name": "‡πÅ‡∏û‡∏∞", "category": "Herbivore"},
        {"name": "‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤", "category": "Carnivore"},
        {"name": "‡πÄ‡∏´‡∏¢‡∏µ‡πà‡∏¢‡∏ß", "category": "Carnivore"},
        {"name": "‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤", "category": "Decomposer"},
        {"name": "‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏î‡∏¥‡∏ô", "category": "Decomposer"}
    ],
    "3": [
        {"name": "‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏ô", "category": "Producer"},
        {"name": "‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà", "category": "Producer"},
        {"name": "‡∏ß‡∏±‡∏ß", "category": "Herbivore"},
        {"name": "‡∏Ñ‡∏ß‡∏≤‡∏¢", "category": "Herbivore"},
        {"name": "‡∏ä‡πâ‡∏≤‡∏á", "category": "Herbivore"},
        {"name": "‡πÄ‡∏™‡∏∑‡∏≠", "category": "Carnivore"},
        {"name": "‡∏™‡∏¥‡∏á‡πÇ‡∏ï", "category": "Carnivore"},
        {"name": "‡∏á‡∏π", "category": "Carnivore"},
        {"name": "‡πÄ‡∏´‡∏¢‡∏µ‡πà‡∏¢‡∏ß", "category": "Carnivore"},
        {"name": "‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤", "category": "Decomposer"},
        {"name": "‡πÅ‡∏°‡∏•‡∏á", "category": "Decomposer"},
        {"name": "‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏î‡∏¥‡∏ô", "category": "Decomposer"}
    ]
}


def show_current_species():
    if not eco.nodes:
        print("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    else:
        print("\nüìÑ ‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:")
        for name, cat in eco.nodes.items():
            print(f"- {name} ({cat})")



def clear_all_species():
    eco.G.clear()
    eco.nodes.clear()
    print("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß")


# ======= ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å =======
eco = EcosystemGraph()

valid_categories = {
    "‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï": "Producer",
    "‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä": "Herbivore",
    "‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠": "Carnivore",
    "‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢": "Decomposer",
    "Producer": "Producer",
    "Herbivore": "Herbivore",
    "Carnivore": "Carnivore",
    "Decomposer": "Decomposer"
}

root = tk.Tk()
root.withdraw()
messagebox.showinfo(
    "üå± Ecosystem Simulation",
    "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏ö‡∏ô‡∏ö‡∏Å"
)
root.destroy()

while True:
    print("\nüåç ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏® (‡∏ö‡∏ô‡∏ö‡∏Å)")
    print("1Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
    print("2Ô∏è‚É£ ‡∏•‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
    print("3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡πà‡∏ß‡∏á‡πÇ‡∏ã‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
    print("4Ô∏è‚É£ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®")
    print("5Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå")
    print("6Ô∏è‚É£ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
    print("9Ô∏è‚É£ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    print("0Ô∏è‚É£ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ").strip()

    
    if choice == "1":
        show_current_species()
        while True:
            name = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏≠‡∏≠‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö): ").strip()
            if name == "‡∏≠‡∏≠‡∏Å":
                break
            while True:
                print("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï / ‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä / ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ / ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢")
                cat_input = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ").strip()
                if cat_input in valid_categories:
                    cat = valid_categories[cat_input]
                    break
                else:
                    print("‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
            if name in eco.nodes:
                print(f"‚ùóÔ∏è '{name}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                continue
            eco.add_species(name, cat)

    
    elif choice == "2":
        while True:  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏≠‡∏≠‡∏Å"
            print("\nüóëÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
            print("1Ô∏è‚É£ ‡∏•‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß")
            print("2Ô∏è‚É£ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            print("0Ô∏è‚É£ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å")
            sub_choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()

            if sub_choice == "1":
                show_current_species()
                name = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ").strip()
                eco.delete_species(name)

            elif sub_choice == "2":
                confirm = input("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'): ").strip()
                if confirm == "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
                    clear_all_species()
                else:
                    print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

            elif sub_choice == "0":
                break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å

            else:
                print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")

    elif choice == "3":
        eco.auto_generate_relationship()

    elif choice == "4":
        eco.analyze_ecosystem()

    
    elif choice == "5":
        if not eco.nodes:
            print("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
        else:
            eco.draw_graph()

    elif choice == "9":
        print("\nüìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:")
        print("1Ô∏è‚É£ ‡∏õ‡πà‡∏≤‡πÄ‡∏Ç‡∏ï‡∏£‡πâ‡∏≠‡∏ô (10 ‡∏ä‡∏ô‡∏¥‡∏î)")
        print("2Ô∏è‚É£ ‡∏ó‡∏∏‡πà‡∏á‡∏´‡∏ç‡πâ‡∏≤ (8 ‡∏ä‡∏ô‡∏¥‡∏î)")
        print("3Ô∏è‚É£ ‡∏õ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ä‡∏∑‡πâ‡∏ô (12 ‡∏ä‡∏ô‡∏¥‡∏î)")
        sub_choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (1-3): ").strip()
        if sub_choice in sample_datasets:
            for data in sample_datasets[sub_choice]:
                eco.add_species(data["name"], data["category"])
            print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        else:
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    
    elif choice == "6":
        show_current_species()
        old = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ").strip()
        if old not in eco.nodes:
            print(f"‚ùóÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö {old}")
            continue
        new = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ").strip()
        while True:
            print("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï / ‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä / ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ / ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢")
            new_cat_input = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà: ").strip()
            if new_cat_input in valid_categories:
                new_cat = valid_categories[new_cat_input]
                break
            else:
                print("‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        eco.edit_species(old, new, new_cat)

    elif choice == "0":
        print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        break

    else:
        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
